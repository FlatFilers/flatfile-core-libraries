import _ from 'lodash'
import { SpaceAccess } from '@flatfile/api'

import { Role } from './Role'
import { Workbook } from './Workbook'
import { EventHandler } from '../utils/event.handler'
import { Agent } from './Agent'
import { Mountable } from '../utils/mountable'
/**
 * Generate a new space configuration for Flatfile. Space configurations
 * are used as a template when creating a new space as well as handle the routing
 * of events generated by Flatfile.
 */
export class SpaceConfig extends EventHandler implements Mountable {
  public targetName = `space`
  constructor(public readonly options: ConfigurationOptions) {
    super()

    _.map(options.workbookConfigs, (value, key) => {
      this.addNode(value, key)
    })
    // this.on([EventTopic.Uploadcompleted], this.fileUploadCompletedEvent)
  }

  getEventTargetName(): string {
    // TODO: make this use the slug so we can handle events/actions for different Spaces in an Agent
    return `space(*)`
  }

  /**
   * Return a default FlatfileConfig if this mounted directly
   */
  mount() {
    return new Agent({
      spaceConfigs: {
        [this.options.slug ?? 'default']: this,
      },
    })
  }
}

export type List<T> = Record<string, T>

interface ConfigurationOptions {
  name: string
  workbookConfigs: List<Workbook> // this should probably be like "templates"
  slug?: string
  description?: string
  theme?: any
  roles?: List<Role>
  access?: SpaceAccess[]
}
